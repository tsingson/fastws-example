const WebSocket = require('ws');

const flatbuffers = require('./flatbuffers').flatbuffers;
const xone = require('./xone_generated').xone; //Generated by `flatc`.

const ws = new WebSocket('ws://127.0.0.1:8080/ws', {
    perMessageDeflate: false,
    // binaryType: "ArrayBuffer",
});

// ws.on('open', function open() {
//     console.log('connected');
//     ws.send(str2ab(Date.now()));
// });

ws.onopen = (evnt) => {
    let b = new flatbuffers.Builder(1);
    let username = b.createString("zlssssssssssssh");
    let password = b.createString("xxxxxxxxxxxxxxxxxxx");
    xone.genflat.LoginRequest.startLoginRequest(b);
    xone.genflat.LoginRequest.addUsername(b, username);
    xone.genflat.LoginRequest.addPassword(b, password);
    xone.genflat.LoginRequest.addMsgID(b, 5);
    let req = xone.genflat.LoginRequest.endLoginRequest(b);
    b.finish(req); //创建结束时记得调用这个finish方法。


    let uint8Array = b.asUint8Array();

    ws.send(uint8Array);

};


ws.onclose = (event) => {
    console.log('disconnected');
};

ws.onmessage = (event) => {
    //-------------------------------------------------------------------
    //   read from websocket and un-serialized via flatbuffers
    //--------------------------------------------------------------------
    if (typeof event.data === 'string') {
        let aa = str2ab(event.data);

        let bb = new flatbuffers.ByteBuffer(aa);
        let lgg = xone.genflat.LoginRequest.getRootAsLoginRequest(bb);
        let pw = lgg.password();

        if (typeof pw === 'string') {
            console.log("----------------------------------------------");

            console.log("username: ", lgg.username());
            console.log("password", lgg.password());
            console.log("msgID: ", lgg.msgID());
        } else {
            console.log("=================================");
            console.log(event.data);
        }
    } else {
        console.log("============" + typeof event.data);

        let aa = new Uint8Array(event.data);
        let cc = new flatbuffers.ByteBuffer(aa);
        let lgg = xone.genflat.LoginRequest.getRootAsLoginRequest(cc);
        let pw = lgg.password();

        if (typeof pw === 'string') {
            console.log("----------------------------------------------");

            console.log("username: ", lgg.username());
            console.log("password", lgg.password());
            console.log("msgID: ", lgg.msgID());
        } else {
            console.log("=================================");
            console.log(event.data);
        }
    }

    // console.log(`Roundtrip time: ${Date.now() }` , ab2str(d ));

    setTimeout(function timeout() {
        //-------------------------------------------------------------------
        //   serialized via flatbuffers and send to websocket
        //--------------------------------------------------------------------
        let b = new flatbuffers.Builder(1);
        let username = b.createString("zlssssssssssssh");
        let password = b.createString("xxxxxxxxxxxxxxxxxxx");
        xone.genflat.LoginRequest.startLoginRequest(b);
        xone.genflat.LoginRequest.addUsername(b, username);
        xone.genflat.LoginRequest.addPassword(b, password);
        xone.genflat.LoginRequest.addMsgID(b, 5);
        let req = xone.genflat.LoginRequest.endLoginRequest(b);
        b.finish(req); //创建结束时记得调用这个finish方法。


        let uint8Array = b.asUint8Array();

        ws.send(uint8Array);
    }, 500);
};

function str2ab(str) {
    let array = new Uint8Array(str.length);
    for (let i = 0; i < str.length; i++) {
        array[i] = str.charCodeAt(i);
    }
    return array
}


// function ab2str(buf) {
//     return String.fromCharCode.apply(null, new Uint16Array(buf));
// }
//
//  str2ab= (str) => {
//     let  buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char
//     let bufView = new Uint16Array(buf);
//     for (let  i = 0, strLen = str.length; i < strLen; i++) {
//         bufView[i] = str.charCodeAt(i);
//     }
//     return buf;
// };
