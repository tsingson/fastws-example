// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package genflat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LoginRequestT struct {
	MsgID    int32
	Username string
	Password string
}

func LoginRequestPack(builder *flatbuffers.Builder, t *LoginRequestT) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	usernameOffset := builder.CreateString(t.Username)
	passwordOffset := builder.CreateString(t.Password)
	LoginRequestStart(builder)
	LoginRequestAddMsgID(builder, t.MsgID)
	LoginRequestAddUsername(builder, usernameOffset)
	LoginRequestAddPassword(builder, passwordOffset)
	return LoginRequestEnd(builder)
}

func (rcv *LoginRequest) UnPackTo(t *LoginRequestT) {
	t.MsgID = rcv.MsgID()
	t.Username = string(rcv.Username())
	t.Password = string(rcv.Password())
}

func (rcv *LoginRequest) UnPack() *LoginRequestT {
	if rcv == nil {
		return nil
	}
	t := &LoginRequestT{}
	rcv.UnPackTo(t)
	return t
}

type LoginRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsLoginRequest(buf []byte, offset flatbuffers.UOffsetT) *LoginRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LoginRequest{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LoginRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LoginRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LoginRequest) MsgID() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 1
}

func (rcv *LoginRequest) MutateMsgID(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *LoginRequest) Username() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LoginRequest) Password() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func LoginRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func LoginRequestAddMsgID(builder *flatbuffers.Builder, msgID int32) {
	builder.PrependInt32Slot(0, msgID, 1)
}
func LoginRequestAddUsername(builder *flatbuffers.Builder, username flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(username), 0)
}
func LoginRequestAddPassword(builder *flatbuffers.Builder, password flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(password), 0)
}
func LoginRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
