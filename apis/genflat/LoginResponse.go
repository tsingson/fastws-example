// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package genflat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LoginResponseT struct {
	MsgID int32
	Uid   string
}

func LoginResponsePack(builder *flatbuffers.Builder, t *LoginResponseT) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	uidOffset := builder.CreateString(t.Uid)
	LoginResponseStart(builder)
	LoginResponseAddMsgID(builder, t.MsgID)
	LoginResponseAddUid(builder, uidOffset)
	return LoginResponseEnd(builder)
}

func (rcv *LoginResponse) UnPackTo(t *LoginResponseT) {
	t.MsgID = rcv.MsgID()
	t.Uid = string(rcv.Uid())
}

func (rcv *LoginResponse) UnPack() *LoginResponseT {
	if rcv == nil {
		return nil
	}
	t := &LoginResponseT{}
	rcv.UnPackTo(t)
	return t
}

type LoginResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsLoginResponse(buf []byte, offset flatbuffers.UOffsetT) *LoginResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LoginResponse{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LoginResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LoginResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LoginResponse) MsgID() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 2
}

func (rcv *LoginResponse) MutateMsgID(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *LoginResponse) Uid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func LoginResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func LoginResponseAddMsgID(builder *flatbuffers.Builder, msgID int32) {
	builder.PrependInt32Slot(0, msgID, 2)
}
func LoginResponseAddUid(builder *flatbuffers.Builder, uid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(uid), 0)
}
func LoginResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
